*Service Oriented Architechture
*The communication is through an API
*Amazon EC2: Elastic Compute Cloud
*Properties that need to be configured for Amazon EC2:
 -AMI: Amazon Machine Image
 -Instance Type: Hardware Profile
 -Security Groups
 -Storage
 -Key Pairs
*How my code works?
 -App -> VM -> Server (Host) -> Availability Zone (Logical Data Center) -> Grouping of AZ's in Regions (at least 2 AZ's per Region) -> API Region -> API Call
*Scope of services:
 -AZ scope: EC2
 -Region Scope: S3
*VPC: Virtual Private Cloud
*Instead of configuring each instance for networking the configuration is made using IP segments
*By default the traffic is able to flow between subnets
*If we want that the web servers have direct traffic to Internet we need a Gateway
*The Internet Gateway is defined in "Route Tables"
*VPC has "Region Scope"
*Subnets have "AZ Scope"
*VPC, Subnets and Rules can be imported from a Cloud Information Template
*Port 80 should be closed in an EZ instance if the server is not a Webserver
*Shared Responsibility
 -Developer Responsibility: +Data & Config
							+Application
							+Guest OS
 -AWS Responsibility: 		+Hypervisor
							+Network
							+Physical
*EC Metadata							
 -To view the log file, type the command below in your instance terminal.
  cat /var/log/cloud-init-output.log

 -Explore the log file to see the log entries generated for installing the user data script.
  To view the instance metadata, type the command below:
  curl http://169.254.169.254/latest/meta-data/

 -Execute the command below to get the instance identity document of your instance:
  curl http://169.254.169.254/latest/dynamic/instance-identity/document

 -Execute the command below to get the instance public IP address:
  curl http://169.254.169.254/latest/meta-data/public-ipv4

 -Execute the command below to get the MAC address of the instance:
  curl http://169.254.169.254/latest/meta-data/mac

 -Execute the command below to get the VPC ID in which the instance resides. Make sure to replace Your-MAC in the command below with the MAC address of your instance:
  curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/Your-MAC/vpc-id

 -Execute the command below to get the subnet-id in which the instance resides. Make sure to replace Your-MAC in the command below with the MAC address of your instance:
  curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/Your-MAC/subnet-id

 -Execute the command below to get the instance user data:
  curl http://169.254.169.254/latest/user-data

Key Topics
AWS Cloud
The AWS Cloud lets you build applications quickly and cost effectively - you pay for the resources you need and can quickly add more resources when you need them.

Free Tier
You can explore AWS and complete the exercises for this course within the AWS Free Tier. AWS automatically provides alerts using AWS Budgets to help you track your free tier usage. See AWS Free Tier Usage Alerts using AWS Budgets for more.

EC2
Amazon Elastic Compute Cloud allows you to run virtual servers in AWS.
Your virtual server is known as an EC2 Instance. It runs on a physical host that is inside an AWS Availability Zone (AZ). There will be 2 or more AZ within an AWS Region. This design allows you to build applications that are resilient to large scale events that could impact an AZ.

If you'd like to learn more about AWS facilities, take a 'digital tour' of an AWS data center!

VPC
Your network in AWS is provided by Amazon Virtual Private Cloud (VPC). You can create a VPC within an AWS region and within that VPC you define subnets to manage related sets of servers or other AWS resources. VPC lets you define rules for how network traffic from your subnets is routed. You can also decide whether your network should be connected to the Internet, to corporate networks, or to keep the network completely private.

The IP Address ranges for VPC and Subnets are specified using CIDR notation. If you'd like to know more about IP addressing within VPC, see the VPCs and Subnets in the User Guide for Amazon VPC. You can also learn more about CIDR notation in section 3.1 of RFC4632 or in Classless Interdomain Routing on Wikipedia.

Security in AWS
You are given a lot of flexibility in AWS to configure and build your applications the way you want. Given that you control your resources, security in AWS is a shared responsibility between AWS and you. AWS will provide secure facilities and building blocks for your application. AWS also provides guidance, and tools that can help you operate securely.

For example, if you are using EC2, it is your responsibility to take advantage of features such as Security Groups (firewall), Private Subnets (to provide network isolation) and encryption options to build secure applications. You are also responsible for keeping the operating system and application stack patched on your server.

If you use AWS managed services like RDS, you still have to make security decisions, but operational tasks like patching the Operating System and SQL engine can be done automatically on your behalf. When using APIs like Amazon S3 API, the underlying infrastructure and maintenance is fully abstracted from you and you are only responsible for calling the API and configuring your access and encryption policies.

For more on the Shared Security Model, see Shared Responsibility Model on the AWS Compliance site.

Additional Services Used
CloudFormation
An AWS service that can take in a declarative document called a 'template' and use it to provision AWS resources on your behalf so you don't have to. We used this to create a VPC to the specifications needed for the course.

EC2 Metadata service
This is a service that intercepts calls to 169.254.169.254 from your EC2 instance to communicate metadata to the instance. This IP address is in the range for IPv4 Link-Local IP addresses as defined by RFC 3927 and the details about the properties the instance that can be retrieved are documented here in the EC2 User Guide.

What you accomplished this week
You signed up for an AWS Account
You launched your first web server into AWS
You built the virtual network we'll use in upcoming exercises and connected to your EC2 instance

Week 2 Notes

*Everything in AWS is an API called
*BOTO 3 is the SDK for python
*Credentials in AWS are:
 -AWS Access Key
 -AWS Secret Key
*These credentials must be stored in a file called "credentials", we do this through the "aws configure" command, the default output format a JSON
*The credentials determine the permissions
*The authentication is through a service called IAM (Identity and Access Manager)
*IAM can be used with a user that already exists or it can be used to create a new user

*First lines of code:
import boto3
S3 client = boto3.resource('S3'); #it can be also EC3, DynamoDB, and so on
S3.meta.client.upload_file(...here we pass all the parameters needed for the call...)

*When creating a new IAM User:
 -Programmatic access is for users that are intended to work with CLI and SDK'scale
 -AWS Management Console Access is for users that are only intended to manage the system through the console.