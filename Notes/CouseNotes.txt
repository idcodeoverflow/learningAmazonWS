*Service Oriented Architechture
*The communication is through an API
*Amazon EC2: Elastic Compute Cloud
*Properties that need to be configured for Amazon EC2:
 -AMI: Amazon Machine Image
 -Instance Type: Hardware Profile
 -Security Groups
 -Storage
 -Key Pairs
*How my code works?
 -App -> VM -> Server (Host) -> Availability Zone (Logical Data Center) -> Grouping of AZ's in Regions (at least 2 AZ's per Region) -> API Region -> API Call
*Scope of services:
 -AZ scope: EC2
 -Region Scope: S3
*VPC: Virtual Private Cloud
*Instead of configuring each instance for networking the configuration is made using IP segments
*By default the traffic is able to flow between subnets
*If we want that the web servers have direct traffic to Internet we need a Gateway
*The Internet Gateway is defined in "Route Tables"
*VPC has "Region Scope"
*Subnets have "AZ Scope"
*VPC, Subnets and Rules can be imported from a Cloud Information Template
*Port 80 should be closed in an EZ instance if the server is not a Webserver
*Shared Responsibility
 -Developer Responsibility: +Data & Config
							+Application
							+Guest OS
 -AWS Responsibility: 		+Hypervisor
							+Network
							+Physical
*EC Metadata							
 -To view the log file, type the command below in your instance terminal.
  cat /var/log/cloud-init-output.log

 -Explore the log file to see the log entries generated for installing the user data script.
  To view the instance metadata, type the command below:
  curl http://169.254.169.254/latest/meta-data/

 -Execute the command below to get the instance identity document of your instance:
  curl http://169.254.169.254/latest/dynamic/instance-identity/document

 -Execute the command below to get the instance public IP address:
  curl http://169.254.169.254/latest/meta-data/public-ipv4

 -Execute the command below to get the MAC address of the instance:
  curl http://169.254.169.254/latest/meta-data/mac

 -Execute the command below to get the VPC ID in which the instance resides. Make sure to replace Your-MAC in the command below with the MAC address of your instance:
  curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/Your-MAC/vpc-id

 -Execute the command below to get the subnet-id in which the instance resides. Make sure to replace Your-MAC in the command below with the MAC address of your instance:
  curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/Your-MAC/subnet-id

 -Execute the command below to get the instance user data:
  curl http://169.254.169.254/latest/user-data
  
 -169.254.169.254: it's the equivalent to 127.0.0.1 but it's for the EC2 instance making the request

Key Topics
AWS Cloud
The AWS Cloud lets you build applications quickly and cost effectively - you pay for the resources you need and can quickly add more resources when you need them.

Free Tier
You can explore AWS and complete the exercises for this course within the AWS Free Tier. AWS automatically provides alerts using AWS Budgets to help you track your free tier usage. See AWS Free Tier Usage Alerts using AWS Budgets for more.

EC2
Amazon Elastic Compute Cloud allows you to run virtual servers in AWS.
Your virtual server is known as an EC2 Instance. It runs on a physical host that is inside an AWS Availability Zone (AZ). There will be 2 or more AZ within an AWS Region. This design allows you to build applications that are resilient to large scale events that could impact an AZ.

If you'd like to learn more about AWS facilities, take a 'digital tour' of an AWS data center!

VPC
Your network in AWS is provided by Amazon Virtual Private Cloud (VPC). You can create a VPC within an AWS region and within that VPC you define subnets to manage related sets of servers or other AWS resources. VPC lets you define rules for how network traffic from your subnets is routed. You can also decide whether your network should be connected to the Internet, to corporate networks, or to keep the network completely private.

The IP Address ranges for VPC and Subnets are specified using CIDR notation. If you'd like to know more about IP addressing within VPC, see the VPCs and Subnets in the User Guide for Amazon VPC. You can also learn more about CIDR notation in section 3.1 of RFC4632 or in Classless Interdomain Routing on Wikipedia.

Security in AWS
You are given a lot of flexibility in AWS to configure and build your applications the way you want. Given that you control your resources, security in AWS is a shared responsibility between AWS and you. AWS will provide secure facilities and building blocks for your application. AWS also provides guidance, and tools that can help you operate securely.

For example, if you are using EC2, it is your responsibility to take advantage of features such as Security Groups (firewall), Private Subnets (to provide network isolation) and encryption options to build secure applications. You are also responsible for keeping the operating system and application stack patched on your server.

If you use AWS managed services like RDS, you still have to make security decisions, but operational tasks like patching the Operating System and SQL engine can be done automatically on your behalf. When using APIs like Amazon S3 API, the underlying infrastructure and maintenance is fully abstracted from you and you are only responsible for calling the API and configuring your access and encryption policies.

For more on the Shared Security Model, see Shared Responsibility Model on the AWS Compliance site.

Additional Services Used
CloudFormation
An AWS service that can take in a declarative document called a 'template' and use it to provision AWS resources on your behalf so you don't have to. We used this to create a VPC to the specifications needed for the course.

EC2 Metadata service
This is a service that intercepts calls to 169.254.169.254 from your EC2 instance to communicate metadata to the instance. This IP address is in the range for IPv4 Link-Local IP addresses as defined by RFC 3927 and the details about the properties the instance that can be retrieved are documented here in the EC2 User Guide.

What you accomplished this week
You signed up for an AWS Account
You launched your first web server into AWS
You built the virtual network we'll use in upcoming exercises and connected to your EC2 instance

Week 2 Notes

*Everything in AWS is an API called
*BOTO 3 is the SDK for python
*Credentials in AWS are:
 -AWS Access Key
 -AWS Secret Key
*These credentials must be stored in a file called "credentials", we do this through the "aws configure" command, the default output format a JSON
*The credentials determine the permissions
*The authentication is through a service called IAM (Identity and Access Manager)
*IAM can be used with a user that already exists or it can be used to create a new user

*First lines of code:
import boto3
S3 client = boto3.resource('S3'); #it can be also EC3, DynamoDB, and so on
S3.meta.client.upload_file(...here we pass all the parameters needed for the call...)

*When creating a new IAM User:
 -Programmatic access is for users that are intended to work with CLI and SDK'scale
 -AWS Management Console Access is for users that are only intended to manage the system through the console.

*Amazon S3 is object storage built to store and retrieve, any amount of data from anywhere.
*Amazon S3 is designed to provide 99.999999999% of durability and 99.99% of availability.
*Buckets are the fundamental containers in Amazon S3 for data storage, a bucket lives an Amazon Region giving us control over the location of the data.
*From a Bucket Name and an Object Key we can build a URL to access an object:
 -https://%bucket_name%/s3.amazonaws.com/photo/%key%
*By default all S3 Buckets are private, only the AWS Account that created them can access them
*There are 3 methods to set the access control for Buckets:
 -Bucket Policies: JSON-policy document for a bucket which specifies the actions that a principle can take on a bucket
 -IAM for Users and Groups: a policy can be attached to a User or Group and allow them to access to certain buckets
 -Access Control Lists: can be used to grant an AWS Account, list and write privileges to a bucket, or read access to an object
*Signed URL's: The application can share objects with others by creating a pre-signed URL; using the credential in the application, we can grant time-limited permission to view an object. It looks like this:
 -https://%bucket_name%/s3.amazonaws.com/photo/%key%?AWSAccessKeyID=%aKey%&Signature=%secretKey%&Expires=%timestampUnixFormat%

*Amazon Recognition:
 -It's a Machine Learning features
 -Object and Scene recognition
 -Detect-labels: the response is a list of labels with a confident value (the likelihood of being a certain object or scene)
 -Detect-faces: takes an image, and the response is collection of detail structures (bounding box, landmarks, age, eyeglasses, emotions)
 -Facial recognition: is achieved by creating an "index-faces", it's a collection of faces and we can search on it by matching entries from a certain face
  +We can search by faceId
  +We can search by Image
 -Amazon Rekognition has a lot of features like:
  +Find text in images
  +Person tracking
  +Find unsafe content
  +Celebrity recognition
  
*Week 2 Notes

AWS SDKs
AWS SDKs are available for many popular programming languages. The AWS SDK for Python, is called Boto3.

If you would like to install and configure Boto3 locally, review the the Boto3 Quickstart on the Read The Docs site.

SDK documentation will include both high level guides and reference documentation. You can find the documentation for Boto3 at Read the Docs.

AWS Identity and Access Management
AWS Identity and Access Management (IAM) is a web service that helps you securely control access to AWS resources. We typically use credentials from IAM Users or IAM Roles to authenticate with AWS when making API calls. We control the permissions for which API actions those Users or Roles can perform with IAM Policies.

Making AWS API Calls
AWS API requests are made against a specific API endpoints located in a specific AWS Region. In this class, we are using the "us-west-2" region which is located in Oregon. For example, here are the API endpoints for Rekognition and the API endpoints for S3.

API requests are typically signed with an access key belonging to an IAM User and using the Signature Version 4 Signing Process. It is also possible to sign these API requests using temporary security credentials such as those derived from an IAM Role.

AWS SDKs check several locations for credentials such as local configuration files and environment variables. If the SDK finds credentials, it will automatically sign your API requests for you. For example, here is how the Python SDK checks for Credentials.

Developing in the cloud with AWS Cloud9
AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. You can run this development environment on a managed Amazon EC2 instance that automatically sleeps when you aren't using it.

Make sure to follow the exercise directions carefully when setting up your Cloud9 instance - it needs to be launched in the specified VPC so that you can access resources that you'll be creating in the coming weeks.

Amazon S3
Amazon Simple Storage Service (S3) is object storage built to store and retrieve any amount of data from anywhere – web sites and mobile apps, corporate applications, and data from IoT sensors or devices. You can store files as Objects within S3 Buckets.

In this course, we are using Amazon S3 to store photos.

By default, the objects you put into S3 are private. S3 allows you to use Bucket Policies, IAM Policies, and ACLs to grant permissions to the contents of the bucket. You can also use Presigned URLs for time-limited access to objects.

Presigned URLs are how we are granting access to images in our Python Application. The S3 Service Feature Guide for Boto3 contains Python examples of working with S3. In particular, you should review the sectin on Generating Presigned Urls.

Amazon Rekognition
Amazon Rekognition is a service that applies deep learning to analyze the contents of images and videos. It supports functionality such scene detection, face detection, even celebrity recognition. In this class, we are using the Detect Labels functionality which takes an image as input and returns labels with confidence values such as {Name: lighthouse, Confidence: 98.4629}

Additional Details
More on AWS Identity And Access Management
When you log in to AWS using your email address and password, you are authenticating as the Root User for the account. The best practice is to avoid logging in as Root except for a handful of operations that only the root user can perform.

Instead, you can create IAM Users within your AWS Account for yourself and for any others that need access to resources in your account. IAM Users have a set of permanent credentials such as an Access Key for API access or a Console Password.

Permissions are granted or denied with IAM Policies. By default, all permissions are denied unless explicitly granted. You may select predefined permissions from the list of AWS Managed Policies or define your own custom IAM policies.

If you find that you'll have several users who need similar permissions, you can define an IAM Group and associate your users to the group.

When working with AWS Services, you may also encounter IAM Roles. Many AWS services require that you use roles to control what that service can access. IAM Roles provide only temporary security credentials. One common case is allowing the EC2 service to distribute credentials to your application code running on an EC2 instance. Roles can also enable other scenarios in the enterprise such as cross-account access and identity federation.

AWS Signature V4 Process
If you'd like to explore Signature V4 Signing further, here's some example code that creates HTTP requests and generates the appropriate signature.

What you accomplished this week
You created an IAM User and are following the best practice of not using Root User in your AWS Account
You installed the AWS SDK and configured credentials
You launched and configured Cloud9 IDE environment
You ran a Python Application that makes AWS API calls to Amazon S3 and AWS Rekognition

Week 3 Notes

*IAM Roles are not associated with a specific user or group, instead a trusted identity assumes a role. When we assume a role we receive time-limited security credentials.
*Roles are powered by the AWS Security Token Service.
*Roles can be assumed by:
 -AWS Service, for example an EC2 instance
 -Another AWS Account
*When a role is assumed, BOTO automatically runs with the permission of the role.
*The Temporary Security Credentials for an instance live in the Instance Metadata Service.
*A DB Instance is an isolated database environment in the Cloud.
*A DB instance can be created via:
 -AWS Management Console
 -AWS Command Line Interface
 -RDS(Relational Data Base) API
*A DB Instance is the "major building block" of RDS. 
*A DB Instance can hold or house multiple databases, it's not one database per DB Instance.

